// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ALU
    Mux16(
        // pins prefixed with 'c' to denote 'control' bits
        a=false, 
        b=instruction, 
        sel=instruction[15], 
        out[0]=cJGT, // LSB, jump greater than -- if > 0  then jump
        out[1]=cJEQ, // jump equal to -- if == 0  then jump
        out[2]=cJLT, // jump less than -- if < 0 then jump
        out[3]=cDestM, // 
        out[3]=writeM, // wire up pin 3 to multiple destinations
        out[4]=cDestD, // 
        out[5]=cDestA, //
        out[6]=cNO, // if 1, negate the output
        out[7]=cF, // if (1) out = x + y else if (0) out = x & y
        out[8]=cNY, // negate the y input
        out[9]=cZY, // zero the y input
        out[10]=cNX, // negate the x input
        out[11]=cZX, // zero the x input
        out[12]=cAorM, // pass input to ALU from A reg or from incoming M value
        // out[13]= // ignored according to spec
        // out[14]= // ignored according to spec
        out[15]=cType // MSB, if == 0, 'a' instruction, else == '1', 'c' instruction
    );
    ALU(
        x=XIn, 
        y=YIn, 
        zx=cZX, 
        nx=cNX, 
        zy=cZY, 
        ny=cNY, 
        f=cF, 
        no=cNO, 
        out=ALUOut,
        out=outM,
        zr=Zero,
        ng=Neg
    );
    Or(a=Zero, b=Neg, out=LTEQOut);
    Not(in=LTEQOut, out=Pos);

    // A Register
    Mux16(a=instruction, b=ALUOut, sel=cType, out=AMuxOut);
    Mux16(a=ARegOut, b=inM, sel=cAorM, out=YIn);
    // Loading the A Register
    Not(in=cType, out=NotCType);
    Or(a=NotCType, b=cDestA, out=LoadA);
    ARegister(in=AMuxOut, load=LoadA, out=ARegOut, out[0..14]=addressM);
    
    // D Register
    DRegister(in=ALUOut, load=cDestD, out=XIn);
    
    
    // Jump Logic & Program Counter
    And(a=cJLT, b=Neg, out=NegOut);
    And(a=cJEQ, b=Zero, out=ZeroOut);
    And(a=cJGT, b=Pos, out=PosOut);
    Or(a=NegOut, b=ZeroOut, out=NegOrZeroOut);
    Or(a=NegOrZeroOut, b=PosOut, out=JumpOut);
    PC(in=ARegOut, load=JumpOut, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
    

    // Reset handler

}

/*

    Notes:

    A-instruction
    - always starts w/ 0 as op-code
    
    0xxxxxxxxxxxxxxx
    
    x = 15-bit address

    C-instruction
    - always starts w/ 1 as op-code
    
    1xxaccccccdddjjj
    
    x = ignored bits

    a = 'comp' part of instruction
        - used to determine whether the ALU input is fed from
          the A register, or the incoming M value

    c = 'comp' part of instruction
        - used to determine which operation the ALU will compute

    d = 'dest' part of instruction
        - used to determine which registers should accept the ALU output

    j = 'jump' part of instruction
        - used to determine which instruction to fetch next


*/