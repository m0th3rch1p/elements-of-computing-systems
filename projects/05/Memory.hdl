// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    /*
        https://www.binary-code.org/
        
        Note: All addresses are 15 bits
        RAM16K binary address range: 000 0000 0000 0000 - 011 1111 1111 1111
        Screen binary address range: 100 0000 0000 0000 - 101 1111 1111 1111
        Keyboard binary address: 110 0000 0000 0000

    */

    /*
        DMux4Way spec:
         * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
         *                {0, in, 0, 0} if sel == 01
         *                {0, 0, in, 0} if sel == 10
         *                {0, 0, 0, in} if sel == 11
    */

    /* 
        Select the two left-most bits of address input via address[13..14]
        
        Note that:
        - RAM16k addresses will start with either 00 or 01
        - screen addresses will start with 10
        - keyboard address startes with 11

        All of which align nicely with the DMux4Way spec shown above
    */
    DMux4Way(in=load, sel=address[13..14], a=RamSelA, b=RamSelB, c=ScreenSel, d=KeyboardSel);
    
    // if any RAM16k address is selected in dmux, 
    // load input for ram chip below becomes `1`
    Or(a=RamSelA, b=RamSelB, out=RamSel);

    // ignore left-most (msb) because it's always 0, 
    // additionally the RAM16k chip only accepts a 14-bit address
    RAM16K(in=in, load=RamSel, address=address[0..13], out=RamOut);

    // ignore the 2 left-most bits because they will always be `10` in the
    // screen memory map, additionally the Screen chip only accepts a 13-bit address
    Screen(in=in, load=ScreenSel, address=address[0..12], out=ScreenOut);

    Keyboard(out=KeyboardOut);
    
    /*
        Mux4Way16 spec:
         * 4-way 16-bit multiplexor:
         * out = a if sel == 00
         *       b if sel == 01
         *       c if sel == 10
         *       d if sel == 11

          S                                                                                                                                                                                                                                                                                                                                                                                                                                                                         imilarly to the DMux4Way, we want to output to the selected memorymap 
          based on the 2 left-most bits in the address input:
            - RAM16k: 00 or 01
            - Screen: 10
            - Keyboard: 11
    */
    Mux4Way16(a=RamOut, b=RamOut, c=ScreenOut, d=KeyboardOut, sel=address[13..14], out=out);
}